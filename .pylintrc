# pylint3 configuration
[MASTER]
jobs=4
profile=no
ignore=.git,venv,packages,pybuild,Makefile,README.md,etc
persistent=yes
cache-size=500
load-plugins=


[MESSAGES CONTROL]
# Enable only checker(s) with the given id(s). This option conflict with the
# disable-checker option
#enable-checker=

# Enable all checker(s) except those with the given id(s). This option conflict
# with the disable-checker option
#disable-checker=

# Enable all messages in the listed categories.
#enable-msg-cat=

# Disable all messages in the listed categories.
#disable-msg-cat=

# Enable the message(s) with the given id(s).
#enable-msg=

# Disable the message(s) with the given id(s).
#disable-msg=C0323,W0142,C0301,C0103,C0111,E0213,C0302,C0203,W0703,R0201


[REPORTS]
# output-format=text
# output-format=parseable
# output-format=html
output-format=colorized
include-ids=yes
files-output=no
reports=yes
# Python expression which should return a note less than 10 (10 is the highest
# note).You have access to the variables errors warning, statement which
# respectivly contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (R0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
# Add a comment according to your evaluation note. This is used by the global
# evaluation report (R0004).
comment=no
# Specify IDs
#enable-report=
# Specify IDs
#disable-report=

[VARIABLES]
# Variables section covers:
#  * Unused variables / imports
#  * Undefined variables
#  * Redefinition of variable from builtins or from an outer scope
#  * Use of variable before assigment
#
# This section is really useful for finding typos in rarely taken
# code paths, e.g. exception handlers, in addition to the usual
# best-practices form stuff
# 
# Ignore "unused" imports in __init__.py
init-import=no
# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=_|dummy
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible. This is a hacky way
# to ignore things, avoid using this if possible
additional-builtins=

[TYPECHECK]
# This section will try to find bugs using type inference

# Tells wether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes
# Nobody is really using zope ...
zope=no

[BASIC]
# This section checks for :
# * Usage of docstrings
# * Usage of modules / classes / functions / methods / arguments / variables name
# * Count of arguments, local variables, branchs, returns and statements in
#   functions, methods
# * Required module attributes
# * Dangerous default values as arguments
# * Redefinition of function / method / class
# * Uses of the global statement

# Required attributes for module, separated by a comma
required-attributes=

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z1-9_]*)|(__.*__))$
# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$
# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$
# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$
# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$
# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$
# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$
# Regular expression which should only match correct list comprehension or
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
# Good variable names which should always be accepted, separated by a comma
good-names=i,ix,j,k,ex,Run,_,ip
# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata
# List of builtins function names that should not be used, separated by a comma
bad-functions=apply,input

[DESIGN]
# This module checks for sign of poor design
# * Checks for "too many" methods, attributes, local variables, ...
# * Checks for "too large" of size, complexity of functions, methods, ...

# These are largely subjective, if you wite decent code you should relax
# these a little
# Maximum number of arguments for function / method
max-args=12
# Maximum number of locals for function / method body
max-locals=30
# Maximum number of return / yield for function / method body
max-returns=12
# Maximum number of branch for function / method body
max-branchs=30
# Maximum number of statements in function / method body
max-statements=60
# Maximum number of parents for a class (see R0901).
max-parents=7
# Maximum number of attributes for a class (see R0902).
max-attributes=20
# Minimum number of public methods for a class (see R0903).
min-public-methods=0
# Maximum number of public methods for a class (see R0904).
max-public-methods=20

[IMPORTS]
# This section checks for:
# * External modules dependencies
# * Relative / wildcard imports
# * Cyclic imports
# * Uses of deprecated modules

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec,codecs

# Graphing features are neat but rarely used ...

# For these, report R0402 must not be disabled!
# Internal and external ependencies in the given file 
import-graph=
# External dependencies in the given file
ext-import-graph=
# Internal dependencies in the given file
int-import-graph=

[CLASSES]
# The section checks for:
# * methods without self as first argument
# * overridden methods signature
# * access only to existant members via self
# * attributes not defined in the __init__ method
# * supported interfaces implementation
# * unreachable code
# 

# List of interface methods to ignore
# This is primarily geared towards Zope, so kind of useless ...
# ignore-iface-methods=
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__

[SIMILARITIES]
# This section spots code-reuse, helping to clean up really amateur code
# or (rarely) find duplicate copy/paste bugs which can be really nasty

# Minimum lines number of a similarity.
min-similarity-lines=6
# Only consider the code, not the metadata
ignore-comments=yes
ignore-docstrings=yes

[MISCELLANEOUS]
# Identifies areas marked for improvements by the developer
notes=FIXME,XXX,TODO

[FORMAT]
# Despite what you may have heard, long lines are totally acceptable practice
# as long as you know what you are doing and are not making things really hard
# to read. 100-140 is pretty reasonable
max-line-length=140
max-module-lines=1000
# 4-spaces,
indent-string='    '
